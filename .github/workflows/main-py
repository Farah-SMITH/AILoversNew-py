from fastapi import FastAPI
from pydantic import BaseModel
from typing import Optional
import random

app = FastAPI()

# User profile model
class UserProfile(BaseModel):
    username: str
    interests: list[str]
    love_language: str  # e.g., "words", "touch", "gifts", "time", "service"
    personality: str    # e.g., "INTJ", "ENFP"
    message_style: Optional[str] = "neutral"

# Simulated database of users
mock_user_db = [
    {
        "username": "luna_ai",
        "interests": ["neuroscience", "machine learning", "gardening"],
        "love_language": "words",
        "personality": "INFJ",
        "message_style": "warm"
    },
    {
        "username": "neuronova",
        "interests": ["robotics", "gaming", "poetry"],
        "love_language": "time",
        "personality": "ENTP",
        "message_style": "funny"
    }
]

@app.get("/")
def root():
    return {"message": "Welcome to AILove ‚Äî Where hearts meet algorithms ‚ù§Ô∏èü§ñ"}

@app.post("/match")
def find_match(user: UserProfile):
    # Naive matching: find a user with at least one shared interest or same love language
    for candidate in mock_user_db:
        if user.love_language == candidate["love_language"] or \
           any(i in candidate["interests"] for i in user.interests):
            return {"match": candidate["username"], "message_style": candidate["message_style"]}
    return {"match": None, "message": "No match found yet. Please try again later!"}

@app.post("/simulate_convo")
def simulate_conversation(user: UserProfile):
    responses = {
        "warm": "Hi! It's so lovely to talk with you. I'm really into thoughtful conversations. üòä",
        "funny": "Hey hey! Are you made of copper and tellurium? Because you're Cu-Te üòÑ",
        "neutral": "Hello. I'm excited to learn more about you."
    }
    response = responses.get(user.message_style, responses["neutral"])
    return {
        "simulated_partner_response": response,
        "note": "This is a mock conversation to help you feel more confident."
    }
